#应用名称，也是服务注册的名称
spring.application.name= evol-user-server
server.port= 8089

spring.zipkin.base-url= http://192.168.0.30:9411/

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name= com.mysql.jdbc.Driver
spring.datasource.url= jdbc:mysql://localhost:3306/coach_user?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&autoReconnect=true&failOverReadOnly=false&useSSL=false
spring.datasource.username= root
spring.datasource.password= 123456

#配置映射类所在的包名
mybatis.type-aliases-package= com.evol.domain.model
#3配置Mapper.xml文件所在的路径，告诉mybatis去哪扫描xml文件
mybatis.mapper-locations= classpath*:mapper/*.xml


#初始化时建立物理连接的个数。
spring.datasource.druid.initial-size=5
#最大连接池数量
spring.datasource.druid.max-active=20
#最小连接池数量
spring.datasource.druid.min-idle=5
#获取连接时最大等待时间，单位毫秒
spring.datasource.druid.max-wait=3000
#是否缓存preparedStatement，也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=false
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
spring.datasource.druid.max-open-prepared-statements= -1
#配置检测可以关闭的空闲连接间隔时间
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置连接在池中的最小生存时间
spring.datasource.druid.min-evictable-idle-time-millis= 300000
spring.datasource.druid.max-evictable-idle-time-millis= 400000


#rabbitmq消息队列采集信息
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
#队列超时重试时间
spring.rabbitmq.connection-timeout=2s
##重试机制
#开启消费者(程序出现异常的情况下会,捕获异常重试将不生效)进行重试
spring.rabbitmq.listener.simple.retry.enabled=true
#最大重试次数
spring.rabbitmq.listener.simple.retry.max-attempts=5
#最大间隔时间
spring.rabbitmq.listener.simple.retry.max-interval=20000ms
#重试间隔时间 3秒
spring.rabbitmq.listener.simple.retry.initial-interval=3000ms
#乘子  重试间隔*乘子得出下次重试间隔  3s  6s  12s  24s  此处24s>20s  走20s
spring.rabbitmq.listener.simple.retry.multiplier=2
#重试次数超过上面的设置之后是否丢弃（false不丢弃时需要写相应代码将该消息加入死信队列）
spring.rabbitmq.listener.simple.default-requeue-rejected=false

#rocketmq 消息队列
rocketmq.name-server=127.0.0.1:9876

spring.redis.host= 127.0.0.1
spring.redis.port=6379
spring.redis.database=0

eureka.client.service-url.defaultZone= http://admin:admin@127.0.0.1:8761/eureka/
eureka.client.enabled= true
eureka.client.register-with-eureka= true
eureka.client.fetch-registry= true

logging.level.com.evol.mapper=debug

## seata
seata.config.file.name= file.conf
seata.config.type= file
seata.registry.type= file
seata.registry.file.name= file
seata.enabled= true
# 事务协调器组(下文中resources下`file.conf`中`tx-service-group`保持一致)
seata.tx-service-group= order-server-group
seata.application-id= user-id
# 默认开启数据源代理
seata.enable-auto-data-source-proxy= true
# 代理模式默认AT
data-source-proxy-mode= AT



