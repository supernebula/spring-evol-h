<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>spring-evol</artifactId>
        <groupId>com.evol</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <version>1.0</version>
    <artifactId>evol-shenyu-gateway</artifactId>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-boot.version>2.2.0.RELEASE</spring-boot.version>
        <!--解决静态资源加载耗时问题-->
        <tomcat.version>8.5.40</tomcat.version>
        <shenyu.version>2.4.2</shenyu.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
            <version>2.2.13.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
            <version>2.2.0.RELEASE</version>
        </dependency>
        <!--Lombok-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-alibaba-nacos-discovery -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>2.1.0.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.60</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.7.0</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-commons</artifactId>
            <version>2.2.0.RELEASE</version>
        </dependency>

        <!-- apache shenyu springCloud plugin start-->
        <dependency>
            <groupId>org.apache.shenyu</groupId>
            <artifactId>shenyu-spring-boot-starter-plugin-springcloud</artifactId>
            <version>${shenyu.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.shenyu</groupId>
            <artifactId>shenyu-spring-boot-starter-plugin-httpclient</artifactId>
            <version>${shenyu.version}</version>
        </dependency>
        <!-- springCloud if you config register center is eureka please dependency end-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>2.2.0.RELEASE</version>
        </dependency>
        <!-- apache shenyu springCloud plugin end-->

        <!--        &lt;!&ndash;soul gateway start&ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>org.dromara</groupId>-->
        <!--            <artifactId>soul-spring-boot-starter-gateway</artifactId>-->
        <!--            <version>${soul.version}</version>-->
        <!--        </dependency>-->
        <!--        &lt;!&ndash;soul data sync start use websocket&ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>org.dromara</groupId>-->
        <!--            <artifactId>soul-spring-boot-starter-sync-data-websocket</artifactId>-->
        <!--            <version>${soul.version}</version>-->
        <!--        </dependency>-->
        <!--        &lt;!&ndash;soul springCloud plugin start&ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>org.dromara</groupId>-->
        <!--            <artifactId>soul-spring-boot-starter-plugin-springcloud</artifactId>-->
        <!--            <version>${soul.version}</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.dromara</groupId>-->
        <!--            <artifactId>soul-spring-boot-starter-plugin-context-path</artifactId>-->
        <!--            <version>${soul.version}</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.dromara</groupId>-->
        <!--            <artifactId>soul-spring-boot-starter-plugin-httpclient</artifactId>-->
        <!--            <version>${soul.version}</version>-->
        <!--        </dependency>-->
        <!--        &lt;!&ndash;soul springCloud plugin end&ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>org.dromara</groupId>-->
        <!--            <artifactId>soul-spring-boot-starter-plugin-ratelimiter</artifactId>-->
        <!--            <version>${soul.version}</version>-->
        <!--        </dependency>-->


        <!-- Sa-Token 权限认证（Reactor响应式集成）, 在线文档：http://sa-token.dev33.cn/ -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-reactor-spring-boot-starter</artifactId>
            <version>1.29.0</version>
        </dependency>

        <dependency>
            <groupId>org.dromara</groupId>
            <artifactId>soul-spring-boot-starter-plugin-sentinel</artifactId>
            <version>${soul.version}</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-transport-simple-http</artifactId>
            <version>1.8.0</version>
        </dependency>

        <dependency>
            <groupId>io.zipkin.zipkin2</groupId>
            <artifactId>zipkin</artifactId>
            <version>2.19.3</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator</artifactId>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>com.evol</groupId>-->
        <!--            <artifactId>coach-common-redis</artifactId>-->
        <!--            <version>0.1-SNAPSHOT</version>-->
        <!--            <scope>compile</scope>-->
        <!--        </dependency>-->
        <dependency>
            <groupId>com.evol</groupId>
            <artifactId>coach-common-core</artifactId>
            <version>0.1-SNAPSHOT</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/src/docker</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <target>${java.version}</target>
                    <source>${java.version}</source>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>



        </plugins>



    </build>


</project>